import './index.svelte.css.proxy.js';
/* src/routes/index.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	query_selector_all,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { theme } from "./store.js";
import ToggleTheme from "../../_components/ToggleTheme.svelte.js";
import Counter from "../../_components/Counter.svelte.js";
import Timer from "../../_components/Timer.svelte.js";

function create_fragment(ctx) {
	let meta0;
	let meta1;
	let meta2;
	let meta3;
	let meta4;
	let meta5;
	let meta6;
	let meta7;
	let meta8;
	let meta9;
	let meta10;
	let meta11;
	let meta12;
	let meta13;
	let t0;
	let div;
	let h1;
	let t1;
	let t2;
	let t3;
	let t4;
	let toggletheme;
	let t5;
	let blockquote;
	let a0;
	let b0;
	let t6;
	let t7;
	let a1;
	let b1;
	let t8;
	let t9;
	let p0;
	let t10;
	let a2;
	let t11;
	let t12;
	let t13;
	let p1;
	let t14;
	let t15;
	let p2;
	let t16;
	let code;
	let t17;
	let t18;
	let t19;
	let counter;
	let t20;
	let timer;
	let current;
	toggletheme = new ToggleTheme({});
	counter = new Counter({});
	timer = new Timer({});

	return {
		c() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			meta3 = element("meta");
			meta4 = element("meta");
			meta5 = element("meta");
			meta6 = element("meta");
			meta7 = element("meta");
			meta8 = element("meta");
			meta9 = element("meta");
			meta10 = element("meta");
			meta11 = element("meta");
			meta12 = element("meta");
			meta13 = element("meta");
			t0 = space();
			div = element("div");
			h1 = element("h1");
			t1 = text("Hello ");
			t2 = text(/*$theme*/ ctx[0]);
			t3 = text(" world!");
			t4 = space();
			create_component(toggletheme.$$.fragment);
			t5 = space();
			blockquote = element("blockquote");
			a0 = element("a");
			b0 = element("b");
			t6 = text("Github repo");
			t7 = text("\n    or ");
			a1 = element("a");
			b1 = element("b");
			t8 = text("dev.to post");
			t9 = space();
			p0 = element("p");
			t10 = text("Visit the ");
			a2 = element("a");
			t11 = text("svelte.dev");
			t12 = text(" to learn how to build Svelte apps.");
			t13 = space();
			p1 = element("p");
			t14 = text("The title is using utility class, but all other elements is using style component.");
			t15 = space();
			p2 = element("p");
			t16 = text("Just check ");
			code = element("code");
			t17 = text("src/routes/index.svelte");
			t18 = text(" to see the code.");
			t19 = space();
			create_component(counter.$$.fragment);
			t20 = space();
			create_component(timer.$$.fragment);
			this.h();
		},
		l(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-4j6roe\"]", document.head);
			meta0 = claim_element(head_nodes, "META", { name: true, content: true });
			meta1 = claim_element(head_nodes, "META", { name: true, content: true });
			meta2 = claim_element(head_nodes, "META", { name: true, content: true });
			meta3 = claim_element(head_nodes, "META", { name: true, content: true });
			meta4 = claim_element(head_nodes, "META", { property: true, content: true });
			meta5 = claim_element(head_nodes, "META", { property: true, content: true });
			meta6 = claim_element(head_nodes, "META", { property: true, content: true });
			meta7 = claim_element(head_nodes, "META", { property: true, content: true });
			meta8 = claim_element(head_nodes, "META", { property: true, content: true });
			meta9 = claim_element(head_nodes, "META", { property: true, content: true });
			meta10 = claim_element(head_nodes, "META", { property: true, content: true });
			meta11 = claim_element(head_nodes, "META", { property: true, content: true });
			meta12 = claim_element(head_nodes, "META", { property: true, content: true });
			meta13 = claim_element(head_nodes, "META", { property: true, content: true });
			head_nodes.forEach(detach);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Hello ");
			t2 = claim_text(h1_nodes, /*$theme*/ ctx[0]);
			t3 = claim_text(h1_nodes, " world!");
			h1_nodes.forEach(detach);
			t4 = claim_space(div_nodes);
			claim_component(toggletheme.$$.fragment, div_nodes);
			t5 = claim_space(div_nodes);
			blockquote = claim_element(div_nodes, "BLOCKQUOTE", { class: true });
			var blockquote_nodes = children(blockquote);
			a0 = claim_element(blockquote_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			b0 = claim_element(a0_nodes, "B", {});
			var b0_nodes = children(b0);
			t6 = claim_text(b0_nodes, "Github repo");
			b0_nodes.forEach(detach);
			a0_nodes.forEach(detach);
			t7 = claim_text(blockquote_nodes, "\n    or ");
			a1 = claim_element(blockquote_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			b1 = claim_element(a1_nodes, "B", {});
			var b1_nodes = children(b1);
			t8 = claim_text(b1_nodes, "dev.to post");
			b1_nodes.forEach(detach);
			a1_nodes.forEach(detach);
			blockquote_nodes.forEach(detach);
			t9 = claim_space(div_nodes);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t10 = claim_text(p0_nodes, "Visit the ");
			a2 = claim_element(p0_nodes, "A", { href: true });
			var a2_nodes = children(a2);
			t11 = claim_text(a2_nodes, "svelte.dev");
			a2_nodes.forEach(detach);
			t12 = claim_text(p0_nodes, " to learn how to build Svelte apps.");
			p0_nodes.forEach(detach);
			t13 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t14 = claim_text(p1_nodes, "The title is using utility class, but all other elements is using style component.");
			p1_nodes.forEach(detach);
			t15 = claim_space(div_nodes);
			p2 = claim_element(div_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t16 = claim_text(p2_nodes, "Just check ");
			code = claim_element(p2_nodes, "CODE", {});
			var code_nodes = children(code);
			t17 = claim_text(code_nodes, "src/routes/index.svelte");
			code_nodes.forEach(detach);
			t18 = claim_text(p2_nodes, " to see the code.");
			p2_nodes.forEach(detach);
			t19 = claim_space(div_nodes);
			claim_component(counter.$$.fragment, div_nodes);
			t20 = claim_space(div_nodes);
			claim_component(timer.$$.fragment, div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			document.title = "SvelteKit ❤️ Tailwind 2";
			attr(meta0, "name", "title");
			attr(meta0, "content", "SvelteKit ❤️ Tailwind 2");
			attr(meta1, "name", "description");
			attr(meta1, "content", "SvelteKit and Tailwind 2 toggle dark/light theme demo");
			attr(meta2, "name", "keywords");
			attr(meta2, "content", "Svelte, SvelteKit, Svelte-kit, Tailwind, HTML, CSS, JavaScript");
			attr(meta3, "name", "author");
			attr(meta3, "content", "@dansvel");
			attr(meta4, "property", "og:type");
			attr(meta4, "content", "website");
			attr(meta5, "property", "og:url");
			attr(meta5, "content", "https://metatags.io/");
			attr(meta6, "property", "og:title");
			attr(meta6, "content", "SvelteKit ❤️ Tailwind 2");
			attr(meta7, "property", "og:description");
			attr(meta7, "content", "SvelteKit and Tailwind 2 toggle dark/light theme demo");
			attr(meta8, "property", "og:image");
			attr(meta8, "content", "https://dev-to-uploads.s3.amazonaws.com/i/yyqy860f5z4n4vk8euzz.png");
			attr(meta9, "property", "twitter:card");
			attr(meta9, "content", "summary_large_image");
			attr(meta10, "property", "twitter:url");
			attr(meta10, "content", "https://metatags.io/");
			attr(meta11, "property", "twitter:title");
			attr(meta11, "content", "SvelteKit ❤️ Tailwind 2");
			attr(meta12, "property", "twitter:description");
			attr(meta12, "content", "SvelteKit and Tailwind 2 toggle dark/light theme demo");
			attr(meta13, "property", "twitter:image");
			attr(meta13, "content", "https://dev-to-uploads.s3.amazonaws.com/i/yyqy860f5z4n4vk8euzz.png");
			attr(h1, "class", "text-5xl font-extrabold mb-4");
			attr(a0, "href", "https://github.com/dansvel/sveltekit-typescript-postcss-tailwind2");
			attr(a1, "href", "https://dev.to/dansvel/sveltekit-svelte-next-with-tailwind-2-4dnn");
			attr(blockquote, "class", "text-xl p-2 bg-gray-200 dark:bg-gray-800 mb-2");
			attr(a2, "href", "https://svelte.dev");
			attr(p0, "class", "svelte-1mnutbm");
			attr(p1, "class", "svelte-1mnutbm");
			attr(p2, "class", "svelte-1mnutbm");
			attr(div, "class", "svelte-1mnutbm");
		},
		m(target, anchor) {
			append(document.head, meta0);
			append(document.head, meta1);
			append(document.head, meta2);
			append(document.head, meta3);
			append(document.head, meta4);
			append(document.head, meta5);
			append(document.head, meta6);
			append(document.head, meta7);
			append(document.head, meta8);
			append(document.head, meta9);
			append(document.head, meta10);
			append(document.head, meta11);
			append(document.head, meta12);
			append(document.head, meta13);
			insert(target, t0, anchor);
			insert(target, div, anchor);
			append(div, h1);
			append(h1, t1);
			append(h1, t2);
			append(h1, t3);
			append(div, t4);
			mount_component(toggletheme, div, null);
			append(div, t5);
			append(div, blockquote);
			append(blockquote, a0);
			append(a0, b0);
			append(b0, t6);
			append(blockquote, t7);
			append(blockquote, a1);
			append(a1, b1);
			append(b1, t8);
			append(div, t9);
			append(div, p0);
			append(p0, t10);
			append(p0, a2);
			append(a2, t11);
			append(p0, t12);
			append(div, t13);
			append(div, p1);
			append(p1, t14);
			append(div, t15);
			append(div, p2);
			append(p2, t16);
			append(p2, code);
			append(code, t17);
			append(p2, t18);
			append(div, t19);
			mount_component(counter, div, null);
			append(div, t20);
			mount_component(timer, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*$theme*/ 1) set_data(t2, /*$theme*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(toggletheme.$$.fragment, local);
			transition_in(counter.$$.fragment, local);
			transition_in(timer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(toggletheme.$$.fragment, local);
			transition_out(counter.$$.fragment, local);
			transition_out(timer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			detach(meta0);
			detach(meta1);
			detach(meta2);
			detach(meta3);
			detach(meta4);
			detach(meta5);
			detach(meta6);
			detach(meta7);
			detach(meta8);
			detach(meta9);
			detach(meta10);
			detach(meta11);
			detach(meta12);
			detach(meta13);
			if (detaching) detach(t0);
			if (detaching) detach(div);
			destroy_component(toggletheme);
			destroy_component(counter);
			destroy_component(timer);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $theme;
	component_subscribe($$self, theme, $$value => $$invalidate(0, $theme = $$value));
	return [$theme];
}

class Routes extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Routes;
//# sourceMappingURL=index.svelte.js.map
