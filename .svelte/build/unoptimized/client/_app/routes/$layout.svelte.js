/* src/routes/$layout.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_component,
	claim_element,
	claim_space,
	component_subscribe,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	globals,
	init,
	insert,
	mount_component,
	query_selector_all,
	safe_not_equal,
	space,
	transition_in,
	transition_out,
	update_slot
} from "../../_snowpack/pkg/svelte/internal.js";

const { document: document_1 } = globals;
import "./_global.css.proxy.js";
import { theme } from "./store.js";
import Nav from "../../_components/Nav.svelte.js";
import { onMount } from "../../_snowpack/pkg/svelte.js";

function create_fragment(ctx) {
	let meta0;
	let meta1;
	let meta2;
	let meta3;
	let meta4;
	let meta5;
	let meta6;
	let meta7;
	let meta8;
	let meta9;
	let meta10;
	let meta11;
	let meta12;
	let meta13;
	let t0;
	let main;
	let nav;
	let t1;
	let current;
	nav = new Nav({});
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			meta3 = element("meta");
			meta4 = element("meta");
			meta5 = element("meta");
			meta6 = element("meta");
			meta7 = element("meta");
			meta8 = element("meta");
			meta9 = element("meta");
			meta10 = element("meta");
			meta11 = element("meta");
			meta12 = element("meta");
			meta13 = element("meta");
			t0 = space();
			main = element("main");
			create_component(nav.$$.fragment);
			t1 = space();
			if (default_slot) default_slot.c();
			this.h();
		},
		l(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1d5jt9s\"]", document_1.head);
			meta0 = claim_element(head_nodes, "META", { name: true, content: true });
			meta1 = claim_element(head_nodes, "META", { name: true, content: true });
			meta2 = claim_element(head_nodes, "META", { name: true, content: true });
			meta3 = claim_element(head_nodes, "META", { name: true, content: true });
			meta4 = claim_element(head_nodes, "META", { property: true, content: true });
			meta5 = claim_element(head_nodes, "META", { property: true, content: true });
			meta6 = claim_element(head_nodes, "META", { property: true, content: true });
			meta7 = claim_element(head_nodes, "META", { property: true, content: true });
			meta8 = claim_element(head_nodes, "META", { property: true, content: true });
			meta9 = claim_element(head_nodes, "META", { property: true, content: true });
			meta10 = claim_element(head_nodes, "META", { property: true, content: true });
			meta11 = claim_element(head_nodes, "META", { property: true, content: true });
			meta12 = claim_element(head_nodes, "META", { property: true, content: true });
			meta13 = claim_element(head_nodes, "META", { property: true, content: true });
			head_nodes.forEach(detach);
			t0 = claim_space(nodes);
			main = claim_element(nodes, "MAIN", {});
			var main_nodes = children(main);
			claim_component(nav.$$.fragment, main_nodes);
			t1 = claim_space(main_nodes);
			if (default_slot) default_slot.l(main_nodes);
			main_nodes.forEach(detach);
			this.h();
		},
		h() {
			document_1.title = "SvelteKit ❤️ Tailwind 2";
			attr(meta0, "name", "title");
			attr(meta0, "content", "SvelteKit ❤️ Tailwind 2");
			attr(meta1, "name", "description");
			attr(meta1, "content", "SvelteKit and Tailwind 2 toggle dark/light theme demo");
			attr(meta2, "name", "keywords");
			attr(meta2, "content", "Svelte, SvelteKit, Svelte-kit, Tailwind, HTML, CSS, JavaScript");
			attr(meta3, "name", "author");
			attr(meta3, "content", "@dansvel");
			attr(meta4, "property", "og:type");
			attr(meta4, "content", "website");
			attr(meta5, "property", "og:url");
			attr(meta5, "content", "https://metatags.io/");
			attr(meta6, "property", "og:title");
			attr(meta6, "content", "SvelteKit ❤️ Tailwind 2");
			attr(meta7, "property", "og:description");
			attr(meta7, "content", "SvelteKit and Tailwind 2 toggle dark/light theme demo");
			attr(meta8, "property", "og:image");
			attr(meta8, "content", "https://dev-to-uploads.s3.amazonaws.com/i/yyqy860f5z4n4vk8euzz.png");
			attr(meta9, "property", "twitter:card");
			attr(meta9, "content", "summary_large_image");
			attr(meta10, "property", "twitter:url");
			attr(meta10, "content", "https://metatags.io/");
			attr(meta11, "property", "twitter:title");
			attr(meta11, "content", "SvelteKit ❤️ Tailwind 2");
			attr(meta12, "property", "twitter:description");
			attr(meta12, "content", "SvelteKit and Tailwind 2 toggle dark/light theme demo");
			attr(meta13, "property", "twitter:image");
			attr(meta13, "content", "https://dev-to-uploads.s3.amazonaws.com/i/yyqy860f5z4n4vk8euzz.png");
		},
		m(target, anchor) {
			append(document_1.head, meta0);
			append(document_1.head, meta1);
			append(document_1.head, meta2);
			append(document_1.head, meta3);
			append(document_1.head, meta4);
			append(document_1.head, meta5);
			append(document_1.head, meta6);
			append(document_1.head, meta7);
			append(document_1.head, meta8);
			append(document_1.head, meta9);
			append(document_1.head, meta10);
			append(document_1.head, meta11);
			append(document_1.head, meta12);
			append(document_1.head, meta13);
			insert(target, t0, anchor);
			insert(target, main, anchor);
			mount_component(nav, main, null);
			append(main, t1);

			if (default_slot) {
				default_slot.m(main, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[0], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(nav.$$.fragment, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(nav.$$.fragment, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			detach(meta0);
			detach(meta1);
			detach(meta2);
			detach(meta3);
			detach(meta4);
			detach(meta5);
			detach(meta6);
			detach(meta7);
			detach(meta8);
			detach(meta9);
			detach(meta10);
			detach(meta11);
			detach(meta12);
			detach(meta13);
			if (detaching) detach(t0);
			if (detaching) detach(main);
			destroy_component(nav);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $theme;
	component_subscribe($$self, theme, $$value => $$invalidate(2, $theme = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;

	onMount(() => {
		if ($theme === "dark") {
			document.querySelector("html").classList.add("dark");
		}

		console.log("themes ", $theme);
	});

	$$self.$$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class $layout extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default $layout;
//# sourceMappingURL=$layout.svelte.js.map
