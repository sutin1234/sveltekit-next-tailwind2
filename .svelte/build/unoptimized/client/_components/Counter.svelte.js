/* src/components/Counter.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	append,
	children,
	claim_element,
	claim_text,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	text
} from "../_snowpack/pkg/svelte/internal.js";

function create_fragment(ctx) {
	let button;
	let t0;
	let t1;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			t0 = text("Clicks: ");
			t1 = text(/*count*/ ctx[0]);
		},
		l(nodes) {
			button = claim_element(nodes, "BUTTON", {});
			var button_nodes = children(button);
			t0 = claim_text(button_nodes, "Clicks: ");
			t1 = claim_text(button_nodes, /*count*/ ctx[0]);
			button_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t0);
			append(button, t1);

			if (!mounted) {
				dispose = listen(button, "click", /*increment*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*count*/ 1) set_data(t1, /*count*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let count = 0;

	const increment = () => {
		$$invalidate(0, count += 1);
	};

	return [count, increment];
}

class Counter extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Counter;
//# sourceMappingURL=Counter.svelte.js.map
